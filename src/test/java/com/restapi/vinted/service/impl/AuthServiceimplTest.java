package com.restapi.vinted.service.impl;

import com.restapi.vinted.entity.Role;
import com.restapi.vinted.entity.User;
import com.restapi.vinted.exception.ApiException;
import com.restapi.vinted.payload.JwtAuthResponse;
import com.restapi.vinted.payload.LoginDto;
import com.restapi.vinted.payload.RegisterDto;
import com.restapi.vinted.repository.RoleRepository;
import com.restapi.vinted.repository.UserRepository;
import com.restapi.vinted.security.JwtTokenProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AuthServiceimplTest {

    @Mock
    private AuthenticationManager authenticationManager;
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private JwtTokenProvider jwtTokenProvider;
    @InjectMocks
    private AuthServiceimpl authServiceImpl;

    @Test
    void givenLoginDto_whenLogin_thenUserIsLoggedIn() {
        LoginDto loginDto = new LoginDto("username", "password");
        Authentication authentication = Mockito.mock(Authentication.class);
        String token = "testAccesToken";

        when(authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
                        loginDto.getUsernameOrEmail(), loginDto.getPassword())))
                .thenReturn(authentication);
        when(jwtTokenProvider.generateToken(authentication)).thenReturn(token);

        JwtAuthResponse response = authServiceImpl.login(loginDto);

        assertEquals(token, response.getAccessToken());
        verify(authenticationManager, times(1))
                .authenticate(new UsernamePasswordAuthenticationToken(
                                    loginDto.getUsernameOrEmail(), loginDto.getPassword()));
        verify(jwtTokenProvider, times(1))
                .generateToken(authentication);
    }

    @Test
    void givenInvalidCredentials_whenLogin_thenUserIsLoggedIn() {
        LoginDto loginDto = new LoginDto("username", "wrong password");

        when(authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
                loginDto.getUsernameOrEmail(), loginDto.getPassword()))).thenThrow(BadCredentialsException.class);

        // Test & Verify
        ApiException exception = assertThrows(ApiException.class, () -> authServiceImpl.login(loginDto));

        assertEquals(exception.getStatus(), HttpStatus.UNAUTHORIZED);
        assertEquals(exception.getMessage(), "Wrong username/email or password");
        verify(authenticationManager, times(1)).authenticate(
                        new UsernamePasswordAuthenticationToken(loginDto.getUsernameOrEmail(), loginDto.getPassword()));
        verify(jwtTokenProvider, never()).generateToken(any());
    }


    //todo: check rest of methods (generated by chat XD)
    @Test
    void testRegister_Success() {
        // Mocking
        RegisterDto registerDto = new RegisterDto("name", "username",
                                                  "email", "password");

        Role userRole = new Role(1L,"ROLE_USER");
        User user = User.builder().id(2L).email("test@email.com")
                .username("username").name("test").password("1234qwer")
                .roles(Set.of(new Role(1, "ROLE_USER"))).build();

        when(userRepository.existsByUsername("username"))
                .thenReturn(false);
        when(userRepository.existsByEmail("email"))
                .thenReturn(false);
        when(roleRepository.findByName("ROLE_USER"))
                .thenReturn(Optional.of(userRole));
        when(passwordEncoder.encode("password"))
                .thenReturn("encodedPassword");
        when(userRepository.save(Mockito.any()))
                .thenReturn(user);

        // Test
        String response = authServiceImpl.register(registerDto);

        // Verify
        assertEquals("User sign up successfully", response);
    }

    @Test
    void testRegister_UsernameTaken() {
        // Mocking
        RegisterDto registerDto = new RegisterDto("name", "existingUsername", "email", "password");

        when(userRepository.existsByUsername("existingUsername"))
                .thenReturn(true);

        // Test & Verify
        assertThrows(ApiException.class, () -> authServiceImpl.register(registerDto));
    }

    @Test
    void testRegister_EmailTaken() {
        // Mocking
        RegisterDto registerDto = new RegisterDto("name", "username", "existingEmail", "password");

        when(userRepository.existsByUsername("username"))
                .thenReturn(false);
        when(userRepository.existsByEmail("existingEmail"))
                .thenReturn(true);

        // Test & Verify
        assertThrows(ApiException.class, () -> authServiceImpl.register(registerDto));
    }
}